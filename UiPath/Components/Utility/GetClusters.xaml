<Activity mc:Ignorable="sap sap2010" x:Class="GetClusters" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:spgf="clr-namespace:Spire.Pdf.General.Find;assembly=Spire.Pdf" xmlns:uasa="clr-namespace:UiPath.Activities.System.Arrays;assembly=UiPath.System.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="out_Clusters" Type="OutArgument(s:String[][])" />
    <x:Property Name="in_FoundTexts" Type="InArgument(spgf:PdfTextFind[])" />
    <x:Property Name="in_VerticalDelta" Type="InArgument(x:Double)" />
    <x:Property Name="in_HorizontalSegments" Type="InArgument(x:Int32)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>1139.2,1584.8</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>Spire.Pdf.General.Find</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Activities.System.Arrays</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>Spire.Pdf</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Get Clusters" sap:VirtualizedContainerService.HintSize="649.6,1520" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="spgf:PdfTextFind[]" Name="CurrentCluster" />
      <Variable x:TypeArguments="x:Double" Name="Minimum" />
      <Variable x:TypeArguments="x:Double" Name="HorizontalDelta" />
      <Variable x:TypeArguments="scg:List(spgf:PdfTextFind[])" Name="Clusters" />
      <Variable x:TypeArguments="x:Int32" Name="ClusterIndex" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:MultipleAssign DisplayName="Assign - Cluster Data" sap:VirtualizedContainerService.HintSize="587.2,194.4" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="scg:List(spgf:PdfTextFind[])">
                <CSharpReference x:TypeArguments="scg:List(spgf:PdfTextFind[])" sap2010:WorkflowViewState.IdRef="CSharpReference`1_27">Clusters</CSharpReference>
              </OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="scg:List(spgf:PdfTextFind[])">
                <CSharpValue x:TypeArguments="scg:List(spgf:PdfTextFind[])" sap2010:WorkflowViewState.IdRef="CSharpValue`1_46">new List&lt;PdfTextFind[]&gt;()</CSharpValue>
              </InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="spgf:PdfTextFind[]">
                <CSharpReference x:TypeArguments="spgf:PdfTextFind[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">CurrentCluster</CSharpReference>
              </OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="spgf:PdfTextFind[]">
                <CSharpValue x:TypeArguments="spgf:PdfTextFind[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_32">new PdfTextFind[in_HorizontalSegments]</CSharpValue>
              </InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Double">
                <CSharpReference x:TypeArguments="x:Double" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">Minimum</CSharpReference>
              </OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Double">
                <CSharpValue x:TypeArguments="x:Double" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27">in_FoundTexts.Min(FoundText =&gt; FoundText.TextBounds.First().X)</CSharpValue>
              </InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Double">
                <CSharpReference x:TypeArguments="x:Double" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">HorizontalDelta</CSharpReference>
              </OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Double">
                <CSharpValue x:TypeArguments="x:Double" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">(in_FoundTexts.Max(FoundText =&gt; FoundText.TextBounds.First().X) - Minimum) / Convert.ToDouble(in_HorizontalSegments)</CSharpValue>
              </InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
    <ui:ForEach x:TypeArguments="spgf:PdfTextFind" CurrentIndex="{x:Null}" DisplayName="For Each - Found Text" sap:VirtualizedContainerService.HintSize="587.2,1050.4" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="spgf:PdfTextFind">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="spgf:PdfTextFind" Name="FoundText" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="553.6,862.4" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="IdealCell" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If DisplayName="If - Out of Delta" sap:VirtualizedContainerService.HintSize="510.4,529.6" sap2010:WorkflowViewState.IdRef="If_1">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_41">CurrentCluster.Any(Value =&gt; Value != null) &amp;&amp; FoundText.TextBounds.First().Y &gt; CurrentCluster.Last(Value =&gt; Value != null).TextBounds.First().Y + in_VerticalDelta</CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="476.8,346.4" sap2010:WorkflowViewState.IdRef="Sequence_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <uasa:AppendItemToList x:TypeArguments="spgf:PdfTextFind[]" ItemIndex="{x:Null}" DisplayName="Append - CurrentCluster to Clusters" sap:VirtualizedContainerService.HintSize="433.6,135.2" sap2010:WorkflowViewState.IdRef="AppendItemToList`1_6">
                    <uasa:AppendItemToList.ItemToAppend>
                      <InArgument x:TypeArguments="spgf:PdfTextFind[]">
                        <CSharpValue x:TypeArguments="spgf:PdfTextFind[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_48">CurrentCluster</CSharpValue>
                      </InArgument>
                    </uasa:AppendItemToList.ItemToAppend>
                    <uasa:AppendItemToList.List>
                      <InArgument x:TypeArguments="scg:IList(spgf:PdfTextFind[])">
                        <CSharpValue x:TypeArguments="scg:IList(spgf:PdfTextFind[])" sap2010:WorkflowViewState.IdRef="CSharpValue`1_49">Clusters</CSharpValue>
                      </InArgument>
                    </uasa:AppendItemToList.List>
                  </uasa:AppendItemToList>
                  <Assign DisplayName="Assign - CurrentCluster" sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_2">
                    <Assign.To>
                      <OutArgument x:TypeArguments="spgf:PdfTextFind[]">
                        <CSharpReference x:TypeArguments="spgf:PdfTextFind[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">CurrentCluster</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="spgf:PdfTextFind[]">
                        <CSharpValue x:TypeArguments="spgf:PdfTextFind[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_38">new PdfTextFind[in_HorizontalSegments]</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap:VirtualizedContainerService.HintSize="300,82.4" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
            <Assign DisplayName="Assign - IdealCell" sap:VirtualizedContainerService.HintSize="510.4,81.6" sap2010:WorkflowViewState.IdRef="Assign_4">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_24">IdealCell</CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_45">(int) Math.Min(in_HorizontalSegments - 1, Math.Max(0, Math.Floor((FoundText.TextBounds.First().X - Minimum) / HorizontalDelta)))</CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign - Found Text" sap:VirtualizedContainerService.HintSize="510.4,81.6" sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="spgf:PdfTextFind">
                  <CSharpReference x:TypeArguments="spgf:PdfTextFind" sap2010:WorkflowViewState.IdRef="CSharpReference`1_25">CurrentCluster[CurrentCluster[IdealCell] != null ? IdealCell + 1 : IdealCell]</CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="spgf:PdfTextFind">
                  <CSharpValue x:TypeArguments="spgf:PdfTextFind" sap2010:WorkflowViewState.IdRef="CSharpValue`1_42">FoundText</CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <ui:ForEach.Values>
        <InArgument x:TypeArguments="sc:IEnumerable">
          <CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_26">in_FoundTexts</CSharpValue>
        </InArgument>
      </ui:ForEach.Values>
    </ui:ForEach>
    <Assign DisplayName="Assign - Cluster Output" sap:VirtualizedContainerService.HintSize="587.2,83.2" sap2010:WorkflowViewState.IdRef="Assign_5">
      <Assign.To>
        <OutArgument x:TypeArguments="s:String[][]">
          <CSharpReference x:TypeArguments="s:String[][]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_28">out_Clusters</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:String[][]">
          <CSharpValue x:TypeArguments="s:String[][]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_55" xml:space="preserve">Clusters.Select(SubCluster =&gt; 
	SubCluster.Select(Child =&gt; 
		Child != null ? Child.SearchText : null
	).ToArray()
).ToArray()</CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
  </Sequence>
</Activity>