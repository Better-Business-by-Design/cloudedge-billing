@using UiPathApi.Swagger.Model.Enum
@using UiPathApi.Swagger.Model
@using System.Timers
@using UiPathApi.Swagger.Api
@inject JobsApi JobsApi

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">@Job?.ReleaseName</MudText>
                <MudAlert Severity="@(Severity.Info)" Class="@(Job?.State is null ? "invisible" : "visible")">Job state: @Job?.State</MudAlert>
            </MudStack>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body1">Runtime: @_jobLength?.ToString(@"hh\:mm\:ss")</MudText>

        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="@(!Job?.State?.Completed() ?? false ? "visible" : "invisible")"/>
    </MudCardContent>
    <MudCardActions>
        <MudStack Row="true" Justify="Justify.SpaceBetween" Style="width: 100%">
            <MudSpacer/>
            <MudButton
                StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Outlined"
                Disabled="@(Job?.State?.Completed() ?? true)" OnClick="@(async () => await OnRemoveClick.InvokeAsync(Job))">
                Remove
            </MudButton>
        </MudStack>
    </MudCardActions>
</MudCard>


@code {

    [Parameter]
    public JobDto? Job { get; set; }

    [Parameter]
    public EventCallback<JobDto> OnRemoveClick { get; set; }

    private Timer _timer = null!;
    private TimeSpan? _jobLength;
    private Severity _severity;

    [Parameter]
    public double Interval { get; set; } = 1000;

    protected override void OnInitialized()
    {
        _timer = new Timer(Interval);
        _timer.Elapsed += async (_, _) => { await InvokeAsync(GetProcessStatus); };
        _timer.Enabled = true;
    }

    private async Task GetProcessStatus()
    {
        if (Job is not null)
        {
            Job = await JobsApi.JobsGetByIdAsync(Job.Id);
            var endTime = Job.EndTime ?? TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time"));
            var startTime = Job.StartTime;

            if (startTime is not null)
            {
                _jobLength = endTime - startTime;
            }
            if (Job?.State?.Completed() ?? false)
            {
                _timer.Enabled = false;
            }
            StateHasChanged();
        }
    }


}