@page "/customers/{Id}"
@using System.Linq.Expressions
@using AccountsReceivable.API.Shared.FluidValidation
@using AccountsReceivable.API.Shared.NewDataRowForm
@inherits EditableDataGridPage<LineItem>

@{
    base.BuildRenderTree(__builder);
}

<CascadingValue Value="Validator">
    <AddNewLineItemForm @ref="_form" OnNewDataRowSubmitted="AddRow" BuildNewDefaultRow="BuildNewDefaultRow" />
</CascadingValue>

<MudDataGrid
    @ref="DataGrid" T="LineItem" ServerData="@(new Func<GridState<LineItem>, Task<GridData<LineItem>>>(GridServerReload))"
    SortMode="SortMode.Multiple" Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterMenu"
    RowClick="@RowClicked" RowStyleFunc="@RowStyleFunc"
    ReadOnly="@ReadOnly" EditMode="DataGridEditMode.Cell"
    CommittedItemChanges="@CommittedRowChanges"
    MultiSelection="true" SelectedItemsChanged="@SelectedRowsChanged" SelectedItems="@SelectedRows"
    Dense="true" Hover="true" Striped="true" Bordered="true" Height="calc(100vh - 9.8rem)"
    >
    <Columns>
        <SelectColumn T="LineItem" ShowInFooter="false"/>
        <PropertyColumn Property="@(x => x.Id)" Title="ID" IsEditable="false"/>
        <PropertyColumn Property="@(x => x.Description)" Title="Description"/>
        <PropertyColumn Property="@(x => x.Quantity)" Title="Quantity" Required="false"/>
        <PropertyColumn Property="@(x => x.UnitPrice)" Title="Unit Price" Required="false"/>
        <PropertyColumn Property="@(x => x.Discount)" Title="Discount" Required="false"/>
        <PropertyColumn Property="@(x => x.Account)" Title="Account" Required="false"/>
        <PropertyColumn Property="@(x => x.Business)" Title="Business" Required="false"/>
    </Columns>
     <NoRecordsContent>
         <MudText>No matching line items found</MudText>
     </NoRecordsContent>
     <LoadingContent>
         <MudText>Loading Line Items...</MudText>
     </LoadingContent>
    <PagerContent>
        <MudDataGridPager T="LineItem" PageSizeOptions="new[] { 25, 50, 100 }"/>
    </PagerContent>
</MudDataGrid>


@code {

    [Parameter]
    public string? Id { get; set; }
    
    private AddNewLineItemForm _form = null!;
    
    private Customer? _customer;

    protected override Task OnInitializedAsync()
    {
        Validator = new LineItemFluentValidator(DbContext);
        _customer ??= DbContext.Customers.FirstOrDefault(customer => customer.Id == Convert.ToInt32(Id ?? "0"));
        return base.OnInitializedAsync();
    }
    

    protected override List<BreadcrumbItem> Breadcrumb  { get; set; } = new()
    {
        new BreadcrumbItem("Home", ""),
        new BreadcrumbItem("Customers", "customers"),
        new BreadcrumbItem("Line Items", null, true)
    };

    protected override IQueryable<LineItem> BuildFullQuery()
    {
        if (_customer is null) { Navigation.NavigateTo("customers"); }
        
        return DbContext.LineItems
            .Where(item => item.CustomerId == Convert.ToInt32(Id));
    }

    protected override IQueryable<LineItem> FilterFullQuery(
        IQueryable<LineItem> fullQuery, 
        IEnumerable<IFilterDefinition<LineItem>> filterDefinitions)
    {
        var filteredQuery = fullQuery;
        foreach (var filterDefinition in filterDefinitions)
        {
            if (filterDefinition.Operator is null) { continue; }
            var logicOperator = filterDefinition.Operator!;
            
            if (filterDefinition.Value is null && filterDefinition.Operator is not ("is empty" or "is not empty")) 
            {
                continue;
            }
            
            Expression<Func<LineItem, bool>> fullPredicate;
            
            // Annoying that this can't be a switch
            if (filterDefinition.FieldType.IsString)
            {
                var value = filterDefinition.Value?.ToString() ?? string.Empty;
                
                Expression<Func<LineItem, string>> selectPredicate = filterDefinition.Title switch
                {
                    "Description" => item => item.Description,
                    "Business" => item => item.Business,
                    _ => throw new NotImplementedException($"{filterDefinition.Title} not implemented in string filters.")
                };

                var logicPredicate = GenerateStringLogicPredicate(logicOperator, value);

                fullPredicate = selectPredicate.Compose(logicPredicate);
            } 
            else if (filterDefinition.FieldType.IsBoolean)
            {
                throw new NotImplementedException(
                    $"No boolean filtering implemented for Line Items table, including not for {filterDefinition.Title}");
            } 
            else if (filterDefinition.FieldType.IsEnum)
            {
                throw new NotImplementedException(
                    $"No enum filtering implemented for Line Items table, including not for {filterDefinition.Title}");
            } 
            else if (filterDefinition.FieldType.IsGuid)
            {
                throw new NotImplementedException(
                    $"No boolean filtering implemented for Line Items table, including not for {filterDefinition.Title}");
            } 
            else if (filterDefinition.FieldType.IsNumber)
            {
                var value = Convert.ToDecimal(filterDefinition.Value ?? 0);
                Expression<Func<LineItem, decimal>> selectPredicate = filterDefinition.Title switch
                {
                    "ID" => item => item.Id,
                    "Quantity" => item => Convert.ToDecimal(item.Quantity),
                    "Unit Price" => item => item.UnitPrice,
                    "Discount" => item => item.Discount,
                    "Account" => item => item.Account,
                    _ => throw new NotImplementedException($"{filterDefinition.Title} not implemented in decimal filters.")
                };

                var logicPredicate = GenerateDecimalLogicPredicate(logicOperator, value);

                fullPredicate = selectPredicate.Compose(logicPredicate);
            } 
            else if (filterDefinition.FieldType.IsDateTime)
            {
                throw new NotImplementedException(
                    $"No datetime filtering implemented for Line Items table, including not for {filterDefinition.Title}");
            }
            else
            {
                throw new NotImplementedException(
                    $"No {filterDefinition.FieldType} filtering implemented for Line Items table.");
            }
            filteredQuery = filteredQuery.Where(fullPredicate);
        }

        return filteredQuery;
    }

    protected override IOrderedQueryable<LineItem> OrderFilteredQuery(IQueryable<LineItem> filteredQuery, IEnumerable<SortDefinition<LineItem>> sortDefinitions)
    {
        var orderedQuery = filteredQuery.OrderBy(item => true);
    // ReSharper disable once LoopCanBeConvertedToQuery
        foreach (var sortDefinition in sortDefinitions)
        {
            Expression<Func<LineItem, object>> keySelector = sortDefinition.SortBy switch
            {
                "Id" => item => item.Id,
                "Description" => item => item.Description,
                "Quantity" => item => item.Quantity,
                "UnitPrice" => item => item.UnitPrice, 
                "Discount" => item => item.Discount,
                "Account" => item => item.Account,
                "Business" => item => item.Business,
                _ => throw new NotImplementedException(
                    $"Sorting not implemented for {sortDefinition.SortBy} column in Line Items table.")
                };

            orderedQuery = sortDefinition.Descending
                ? orderedQuery.ThenByDescending(keySelector)
                : orderedQuery.ThenBy(keySelector);
        }

        return orderedQuery;
    }


    protected override void ReadOnlyRowClicked(DataGridRowClickEventArgs<LineItem> args)
    {
        Console.WriteLine("Customer Detail Row Clicked");
    }

    protected override async Task<LineItem> BuildNewDefaultRow()
    {
        var customer = _customer ?? throw new ArgumentNullException(nameof(_customer), "Unable to add new line item to null customer.");
        
        return new LineItem()
        {
            CustomerId = customer.Id,
        };
    }

    protected override async Task OnAddButtonClicked()
    {
        await _form.OpenForm();
    }

}