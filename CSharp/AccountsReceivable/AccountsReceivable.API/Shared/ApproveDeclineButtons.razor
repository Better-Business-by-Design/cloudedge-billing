@using Microsoft.Extensions.Logging
@using AccountsReceivable.BL.Models.Enum
@using System.Security.Authentication
@inject ILogger<ApproveDeclineButtons> Logger
@inject IDialogService DialogService

@if ((Role ?? RoleId.Missing) is RoleId.ReadWrite or RoleId.Administrator)
    {
        <MudButton
            Color="Color.Primary"
            Variant="Variant.Filled"
            StartIcon="@Icons.Material.Filled.Email"
            OnClick="@InvokeEmailButtonTask">
        </MudButton>
            
        <MudButton 
            Color="Color.Primary"
            Variant="Variant.Filled"
            OnClick="@OpenApproveDialog"
            Disabled="@IsStatusNotPendingOrDeclined()">
            Approve
        </MudButton>

        <MudButton 
            Color="Color.Error"
            Variant="Variant.Filled"
            Class="ml-2"
            OnClick="@OpenDeclineDialog"
            Disabled="@IsStatusNotPending()">
            Decline
        </MudButton>
    }

@code {
    [Parameter]
    public RoleId? Role { get; set; }
    
    [Parameter]
    public StatusId? Status { get; set; }
    
    [Parameter]
    public Task? EmailButtonTask { get; set; }
    
    [Parameter]
    public Task? SetApprovedTask { get; set; }
    
    [Parameter]
    public Task? SetDeclinedTask { get; set; }
    
    [Parameter]
    public string? DetailObjectType { get; set; }

    private void InvokeEmailButtonTask()
    {
        EmailButtonTask?.Start();
    }
    
    private async void OpenApproveDialog()
    {
        var result = await OpenAuthRequiredDialog("approve");
        if (result) SetApprovedTask?.Start();
    }

    private async void OpenDeclineDialog()
    {
        var result = await OpenAuthRequiredDialog("decline");
        if (result) SetDeclinedTask?.Start();
    }

    private async Task<bool> OpenAuthRequiredDialog(string changeString)
    {
        if ((Role ?? RoleId.Missing) is not (RoleId.ReadWrite or RoleId.Administrator))
        {
            throw new AuthenticationException($"User with role {(Role ?? RoleId.Missing).ToString()} doesn't have permission to change Status values, needs either {RoleId.ReadWrite.ToString()} or {RoleId.Administrator.ToString()}");
        } 
        
        var result = await DialogService.ShowMessageBox(
            "Approval Confirmation",
            "Are you sure you want to "+ changeString + " this " + (DetailObjectType ?? "Object") + "?",
            "Approve", cancelText: "Cancel");

        return result ?? false;
    }

    private bool IsStatusNotPendingOrDeclined()
    {
        return (Status ?? StatusId.Missing) is not (StatusId.Pending or StatusId.Declined);
    }

    private bool IsStatusNotPending()
    {
        return (Status ?? StatusId.Missing) is not StatusId.Pending;
    }
}